<?php

namespace Tests\Unit;

use Tests\TestCase;
use TRF4\UI\Config;
use TRF4\UI\Renderer\Bootstrap4;
use TRF4\UI\UI;

class SelectTest extends TestCase
{

    public function tearDown(): void
    {
        Config::setSelectInvalidValueFeedbackFilter(null);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testBS4Required_withUserDefinedFeedbackFilter()
    {
        Config::setSelectInvalidValueFeedbackFilter('strtoupper');
        UI::config(new Bootstrap4());
        $actual = UI::select('States', 'id_states2')
            ->placeholder('Select a state...')
            ->required()
            ->render();

        $expected = <<<html
            <div class="form-group">
                <label class="d-block" for="id_states2">States<span class="text-danger">*</span></label>
                <select id="id_states2" name="id_states2" required>
                    <option value="">Select a state...</option>
                </select>
            </div>
            <script>UI.PHPHelper.select.init('id_states2', "<div class='invalid-feedback'>O CAMPO \"STATES\" \u00e9 OBRIGAT\u00f3RIO<\/div>");</script>            
html;
        $this->assertHtmlEquals($expected, $actual);
    }

    public function testSelect_arrayComMaisDe2DimensoesLancaException()
    {
        $this->expectExceptionMessage('Formato de de opções inválido; opções de optgroups não podem ser arrays');
        UI::config(new Bootstrap4);
        UI::select('Select', 'name', [
            ['Optgroup', [
                1 => 'option 1',
                2 => []
            ]]
        ])->render();
    }
}


